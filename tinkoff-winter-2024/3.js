//Максим пришёл в Тинькофф, чтобы взять кредит на покупку новогодних подарков. Ему предодобрен кредит в размере ﻿mm﻿ бурлей, значит он может взять любое целое количество бурлей от ﻿00﻿ до ﻿mm﻿ включительно.
//
// У Максима есть заранее подготовленный список из ﻿nn﻿ подарков. Он планирует идти по порядку вдоль списка и каждый раз, когда он видит подарок, на который у него хватает денег, он обязательно моментально его покупает.
//
// Помогите ему посчитать, какое максимальное количество денег у него может остаться после закупки подарков, если он возьмёт кредит оптимального размера (то есть такого, чтобы у него осталось как можно больше денег после покупки подарков по алгоритму).
//
// Формат входных данных
//
// Первая строка содержит два целых числа ﻿nn﻿ и ﻿mm﻿ ﻿(1≤n≤105,1≤m≤109)(1≤n≤105,1≤m≤109)﻿ — длина списка подарков и размер предодобренного кредита.
//
// Вторая строка содержит ﻿nn﻿ целых чисел — цены подарков ﻿aiai​﻿ ﻿(1≤ai≤109)(1≤ai​≤109)﻿.
//
// Формат выходных данных
//
// Выведите одно число — максимальное количество бурлей, которое могло остаться у Максима после закупки подарков.
//
// Замечание 1
//
// В первом примере Максим может взять в кредит ﻿33﻿ бурля, и тогда он купит только последний подарок. Во втором примере Максим может взять кредит на все ﻿1010﻿ бурлей и купить все подарки.
//
// Замечание 2
//
// Ошибок в примерах нет.
// Ввод
//3 10
// 5 4 1
//Вывод
//2
//
// Ввод
//3 10
// 1 2 3
//Вывод
//4

const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const inputData = [];
const DIVIDER = ' ';

function solve() {
    let res = []
    const n = Number(inputData[0].split(DIVIDER)[0])
    const m = Number(inputData[0].split(DIVIDER)[1])
    const presents = inputData[1].split(DIVIDER)
    console.log(presents === presents.sort((a,b) => b - a))

    console.log(n, m, presents)


}

rl.on('line', (data) => {
    inputData.push(data)
    if (inputData.length === 2) {
        rl.close();
        console.log(solve());
    }
});